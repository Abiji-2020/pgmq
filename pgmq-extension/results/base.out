-- CREATE pgmq.
CREATE EXTENSION IF NOT EXISTS pgmq;
CREATE EXTENSION IF NOT EXISTS pg_partman;
ERROR:  extension "pg_partman" is not available
DETAIL:  Could not open extension control file "/usr/share/postgresql/16/extension/pg_partman.control": No such file or directory.
HINT:  The extension must first be installed on the system where PostgreSQL is running.

-- test_unlogged
-- CREATE with default retention and partition strategy
SELECT pgmq.create_unlogged('test_unlogged_queue');
 create_unlogged 
-----------------
 
(1 row)

SELECT * from pgmq.send('test_unlogged_queue', '{"hello": "world"}');
 send 
------
    1
(1 row)

SELECT msg_id, read_ct, enqueued_at > NOW(), vt > NOW(), message
  FROM pgmq.read('test_unlogged_queue', 2, 1);
 msg_id | read_ct | ?column? | ?column? |      message       
--------+---------+----------+----------+--------------------
      1 |       1 | f        | t        | {"hello": "world"}
(1 row)


-- test_max_queue_name_size
-- CREATE with default retention and partition strategy
SELECT pgmq.create(repeat('a', 48));
ERROR:  queue name is too long, maximum length is 48 characters
CONTEXT:  PL/pgSQL function pgmq.validate_queue_name(text) line 4 at RAISE
SQL statement "SELECT pgmq.validate_queue_name(queue_name)"
PL/pgSQL function pgmq.create_non_partitioned(text) line 6 at PERFORM
SQL statement "SELECT pgmq.create_non_partitioned(queue_name)"
PL/pgSQL function pgmq."create"(text) line 3 at PERFORM
SELECT pgmq.create(repeat('a', 47));
 create 
--------
 
(1 row)


-- test_lifecycle
-- CREATE with default retention and partition strategy
SELECT pgmq.create('test_default_queue');
 create 
--------
 
(1 row)


-- creating a queue must be idempotent
-- create with same name again, must be no error
SELECT pgmq.create('test_default_queue');
NOTICE:  relation "q_test_default_queue" already exists, skipping
NOTICE:  relation "a_test_default_queue" already exists, skipping
NOTICE:  relation "q_test_default_queue_vt_idx" already exists, skipping
NOTICE:  relation "archived_at_idx_test_default_queue" already exists, skipping
 create 
--------
 
(1 row)


SELECT * from pgmq.send('test_default_queue', '{"hello": "world"}');
 send 
------
    1
(1 row)


-- read message
-- vt=2, limit=1
\set msg_id 1
SELECT msg_id = :msg_id FROM pgmq.read('test_default_queue', 2, 1);
 ?column? 
----------
 t
(1 row)


-- set VT to 5 seconds
SELECT vt > clock_timestamp() + '4 seconds'::interval
  FROM pgmq.set_vt('test_default_queue', :msg_id, 5);
 ?column? 
----------
 t
(1 row)


-- read again, assert no messages because we just set VT to the future
SELECT msg_id = :msg_id FROM pgmq.read('test_default_queue', 2, 1);
 ?column? 
----------
(0 rows)


-- read again, now using poll to block until message is ready
SELECT msg_id = :msg_id FROM pgmq.read_with_poll('test_default_queue', 10, 1, 10);
 ?column? 
----------
 t
(1 row)


-- after reading it, set VT to now
SELECT msg_id = :msg_id FROM pgmq.set_vt('test_default_queue', :msg_id, 0);
 ?column? 
----------
 t
(1 row)


-- read again, should have msg_id 1 again
SELECT msg_id = :msg_id FROM pgmq.read('test_default_queue', 2, 1);
 ?column? 
----------
 t
(1 row)


-- send a batch of 2 messages
SELECT pgmq.create('batch_queue');
 create 
--------
 
(1 row)

SELECT ARRAY( SELECT pgmq.send_batch(
    'batch_queue',
    ARRAY['{"hello": "world_0"}', '{"hello": "world_1"}']::jsonb[]
)) = ARRAY[1, 2]::BIGINT[];
 ?column? 
----------
 t
(1 row)


-- CREATE with 5 seconds per partition, 10 seconds retention
SELECT pgmq.create_partitioned('test_duration_queue', '5 seconds', '10 seconds');
ERROR:  pg_partman is required for partitioned queues
CONTEXT:  PL/pgSQL function pgmq._ensure_pg_partman_installed() line 12 at RAISE
SQL statement "SELECT pgmq._ensure_pg_partman_installed()"
PL/pgSQL function pgmq.create_partitioned(text,text,text) line 11 at PERFORM

-- CREATE with 10 messages per partition, 20 messages retention
SELECT pgmq.create_partitioned('test_numeric_queue', '10 seconds', '20 seconds');
ERROR:  pg_partman is required for partitioned queues
CONTEXT:  PL/pgSQL function pgmq._ensure_pg_partman_installed() line 12 at RAISE
SQL statement "SELECT pgmq._ensure_pg_partman_installed()"
PL/pgSQL function pgmq.create_partitioned(text,text,text) line 11 at PERFORM

-- get metrics
SELECT queue_name, queue_length, newest_msg_age_sec, oldest_msg_age_sec, total_messages
 FROM pgmq.metrics('test_duration_queue');
ERROR:  relation "pgmq.q_test_duration_queue" does not exist
LINE 8:             FROM pgmq.q_test_duration_queue
                         ^
QUERY:  
        WITH q_summary AS (
            SELECT
                count(*) as queue_length,
                EXTRACT(epoch FROM (NOW() - max(enqueued_at)))::int as newest_msg_age_sec,
                EXTRACT(epoch FROM (NOW() - min(enqueued_at)))::int as oldest_msg_age_sec,
                NOW() as scrape_time
            FROM pgmq.q_test_duration_queue
        ),
        all_metrics AS (
            SELECT CASE
                WHEN is_called THEN last_value ELSE 0
                END as total_messages
            FROM pgmq.q_test_duration_queue_msg_id_seq
        )
        SELECT
            'test_duration_queue' as queue_name,
            q_summary.queue_length,
            q_summary.newest_msg_age_sec,
            q_summary.oldest_msg_age_sec,
            all_metrics.total_messages,
            q_summary.scrape_time
        FROM q_summary, all_metrics
        
CONTEXT:  PL/pgSQL function pgmq.metrics(text) line 34 at EXECUTE

-- get metrics all
SELECT * from {PGMQ_SCHEMA}.metrics_all();
ERROR:  syntax error at or near "{"
LINE 1: SELECT * from {PGMQ_SCHEMA}.metrics_all();
                      ^

-- delete all the queues
-- delete partitioned queues
SELECT pgmq.drop_queue(queue, true)
  FROM unnest('{test_duration_queue, test_numeric_queue}'::text[]) AS queue;
ERROR:  relation "pgmq.q_test_duration_queue" does not exist
CONTEXT:  SQL statement "
        ALTER EXTENSION pgmq DROP TABLE pgmq.q_test_duration_queue
        "
PL/pgSQL function pgmq.drop_queue(text,boolean) line 8 at EXECUTE

-- drop the rest of the queues
SELECT pgmq.drop_queue(q.queue_name, true)
  FROM (SELECT queue_name FROM pgmq.list_queues()) AS q;
ERROR:  null values cannot be formatted as an SQL identifier
CONTEXT:  PL/pgSQL function pgmq.drop_queue(text,boolean) line 50 at EXECUTE

SELECT queue_name FROM pgmq.list_queues();
                   queue_name                    
-------------------------------------------------
 test_unlogged_queue
 aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
 test_default_queue
 batch_queue
(4 rows)


-- test_archive
SELECT pgmq.create('archive_queue');
 create 
--------
 
(1 row)


-- no messages in the queue
SELECT COUNT(*) = 0 FROM pgmq.q_archive_queue;
 ?column? 
----------
 t
(1 row)


-- no messages in queue archive
SELECT COUNT(*) = 0 FROM pgmq.a_archive_queue;
 ?column? 
----------
 t
(1 row)


-- put messages on the queue
\set msg_id1 1::bigint
\set msg_id2 2::bigint
SELECT send = :msg_id1 FROM pgmq.send('archive_queue', '0');
 ?column? 
----------
 t
(1 row)

SELECT send = :msg_id2 FROM pgmq.send('archive_queue', '0');
 ?column? 
----------
 t
(1 row)


-- two messages in the queue
SELECT COUNT(*) = 2 FROM pgmq.q_archive_queue;
 ?column? 
----------
 t
(1 row)


-- archive the message. The first two exist so the id should be returned, the
-- last one doesn't
SELECT ARRAY(
    SELECT * FROM pgmq.archive('archive_queue', ARRAY[:msg_id1, :msg_id2])
) = ARRAY[:msg_id1, :msg_id2];
 ?column? 
----------
 t
(1 row)


-- should be no messages left on the queue table
SELECT COUNT(*) = 0 FROM pgmq.q_archive_queue;
 ?column? 
----------
 t
(1 row)


-- should be two messages in archive
SELECT COUNT(*) = 2 FROM pgmq.a_archive_queue;
 ?column? 
----------
 t
(1 row)


\set msg_id3 3::bigint
SELECT send = :msg_id3 FROM pgmq.send('archive_queue', '0');
 ?column? 
----------
 t
(1 row)

SELECT COUNT(*) = 1 FROM pgmq.q_archive_queue;
 ?column? 
----------
 t
(1 row)

SELECT * FROM pgmq.archive('archive_queue', :msg_id3);
 archive 
---------
 t
(1 row)

SELECT COUNT(*) = 0 FROM pgmq.q_archive_queue;
 ?column? 
----------
 t
(1 row)

SELECT COUNT(*) = 3 FROM pgmq.a_archive_queue;
 ?column? 
----------
 t
(1 row)


-- test_read_read_with_poll
-- Creating queue
SELECT pgmq.create('test_read_queue');
 create 
--------
 
(1 row)


-- Sending 3 messages to the queue
SELECT send = :msg_id1 FROM pgmq.send('test_read_queue', '0');
 ?column? 
----------
 t
(1 row)

SELECT send = :msg_id2 FROM pgmq.send('test_read_queue', '0');
 ?column? 
----------
 t
(1 row)

SELECT send = :msg_id3 FROM pgmq.send('test_read_queue', '0');
 ?column? 
----------
 t
(1 row)


-- Reading with limit respects the limit
SELECT msg_id = :msg_id1 FROM pgmq.read('test_read_queue', 5, 1);
 ?column? 
----------
 t
(1 row)


-- Reading respects the VT
SELECT ARRAY(
    SELECT msg_id FROM pgmq.read('test_read_queue', 10, 5)
) = ARRAY[:msg_id2, :msg_id3];
 ?column? 
----------
 t
(1 row)


-- Read with poll will poll until the first message is available
SELECT clock_timestamp() AS start \gset
SELECT msg_id = :msg_id1 FROM pgmq.read_with_poll('test_read_queue', 10, 5, 5, 100);
 ?column? 
----------
 t
(1 row)

SELECT clock_timestamp() - :'start' > '3 second'::interval;
 ?column? 
----------
 t
(1 row)


-- test_purge_queue
SELECT pgmq.create('test_purge_queue');
 create 
--------
 
(1 row)

SELECT * from pgmq.send('test_purge_queue', '0');
 send 
------
    1
(1 row)

SELECT * from pgmq.send('test_purge_queue', '0');
 send 
------
    2
(1 row)

SELECT * from pgmq.send('test_purge_queue', '0');
 send 
------
    3
(1 row)

SELECT * from pgmq.send('test_purge_queue', '0');
 send 
------
    4
(1 row)

SELECT * from pgmq.send('test_purge_queue', '0');
 send 
------
    5
(1 row)


SELECT * FROM pgmq.purge_queue('test_purge_queue');
 purge_queue 
-------------
           5
(1 row)

SELECT COUNT(*) = 0 FROM pgmq.q_test_purge_queue;
 ?column? 
----------
 t
(1 row)


-- test_pop
SELECT pgmq.create('test_pop_queue');
 create 
--------
 
(1 row)

SELECT * FROM pgmq.pop('test_pop_queue');
 msg_id | read_ct | enqueued_at | vt | message 
--------+---------+-------------+----+---------
(0 rows)


SELECT send AS first_msg_id from pgmq.send('test_pop_queue', '0') \gset
SELECT * from pgmq.send('test_pop_queue', '0');
 send 
------
    2
(1 row)

SELECT * from pgmq.send('test_pop_queue', '0');
 send 
------
    3
(1 row)


SELECT msg_id = :first_msg_id FROM pgmq.pop('test_pop_queue');
 ?column? 
----------
 t
(1 row)


-- test_set_vt
SELECT pgmq.create('test_set_vt_queue');
 create 
--------
 
(1 row)

SELECT * FROM pgmq.set_vt('test_set_vt_queue', 9999, 0);
 msg_id | read_ct | enqueued_at | vt | message 
--------+---------+-------------+----+---------
(0 rows)


SELECT send AS first_msg_id from pgmq.send('test_set_vt_queue', '0') \gset

-- set message invisible for 100 seconds
SELECT msg_id FROM pgmq.set_vt('test_set_vt_queue', :first_msg_id, 100);
 msg_id 
--------
      1
(1 row)


-- read message, it should not be visible
SELECT msg_id from pgmq.read('test_set_vt_queue', 1, 1);
 msg_id 
--------
(0 rows)


-- make it visible
SELECT msg_id FROM pgmq.set_vt('test_set_vt_queue', :first_msg_id, 0);
 msg_id 
--------
      1
(1 row)


-- set vt works if message is readable
SELECT msg_id from pgmq.read('test_set_vt_queue', 1, 1);
 msg_id 
--------
      1
(1 row)


-- test_partitioned_delete
\set partition_interval 2
\set retention_interval 2

-- We first will drop pg_partman and assert that create fails without the
-- extension installed
DROP EXTENSION pg_partman;
ERROR:  extension "pg_partman" does not exist

SELECT * FROM pgmq.create_partitioned(
    'test_partitioned_queue',
    :'partition_interval',
    :'retention_interval'
);
ERROR:  pg_partman is required for partitioned queues
CONTEXT:  PL/pgSQL function pgmq._ensure_pg_partman_installed() line 12 at RAISE
SQL statement "SELECT pgmq._ensure_pg_partman_installed()"
PL/pgSQL function pgmq.create_partitioned(text,text,text) line 11 at PERFORM

-- With the extension existing, the queue is created successfully
CREATE EXTENSION pg_partman;
ERROR:  extension "pg_partman" is not available
DETAIL:  Could not open extension control file "/usr/share/postgresql/16/extension/pg_partman.control": No such file or directory.
HINT:  The extension must first be installed on the system where PostgreSQL is running.
SELECT * FROM pgmq.create_partitioned(
    'test_partitioned_queue',
    :'partition_interval',
    :'retention_interval'
);
ERROR:  pg_partman is required for partitioned queues
CONTEXT:  PL/pgSQL function pgmq._ensure_pg_partman_installed() line 12 at RAISE
SQL statement "SELECT pgmq._ensure_pg_partman_installed()"
PL/pgSQL function pgmq.create_partitioned(text,text,text) line 11 at PERFORM

-- queue shows up in list queues
SELECT queue_name FROM pgmq.list_queues()
 WHERE queue_name = 'test_partitioned_queue';
 queue_name 
------------
(0 rows)


-- Sending 3 messages to the queue
SELECT send AS msg_id1 from pgmq.send('test_partitioned_queue', '0') \gset
ERROR:  relation "pgmq.q_test_partitioned_queue" does not exist
LINE 2:         INSERT INTO pgmq.q_test_partitioned_queue (vt, messa...
                            ^
QUERY:  
        INSERT INTO pgmq.q_test_partitioned_queue (vt, message)
        VALUES ((clock_timestamp() + '@ 0'), $1)
        RETURNING msg_id;
        
CONTEXT:  PL/pgSQL function pgmq.send(text,jsonb,integer) line 14 at RETURN QUERY
SELECT send AS msg_id2 from pgmq.send('test_partitioned_queue', '0') \gset
ERROR:  relation "pgmq.q_test_partitioned_queue" does not exist
LINE 2:         INSERT INTO pgmq.q_test_partitioned_queue (vt, messa...
                            ^
QUERY:  
        INSERT INTO pgmq.q_test_partitioned_queue (vt, message)
        VALUES ((clock_timestamp() + '@ 0'), $1)
        RETURNING msg_id;
        
CONTEXT:  PL/pgSQL function pgmq.send(text,jsonb,integer) line 14 at RETURN QUERY
SELECT send AS msg_id3 from pgmq.send('test_partitioned_queue', '0') \gset
ERROR:  relation "pgmq.q_test_partitioned_queue" does not exist
LINE 2:         INSERT INTO pgmq.q_test_partitioned_queue (vt, messa...
                            ^
QUERY:  
        INSERT INTO pgmq.q_test_partitioned_queue (vt, message)
        VALUES ((clock_timestamp() + '@ 0'), $1)
        RETURNING msg_id;
        
CONTEXT:  PL/pgSQL function pgmq.send(text,jsonb,integer) line 14 at RETURN QUERY

SELECT COUNT(*) = 3 FROM pgmq.q_test_partitioned_queue;
ERROR:  relation "pgmq.q_test_partitioned_queue" does not exist
LINE 1: SELECT COUNT(*) = 3 FROM pgmq.q_test_partitioned_queue;
                                 ^

-- Deleting message 3
SELECT * FROM pgmq.delete('test_partitioned_queue', :msg_id3);
ERROR:  relation "pgmq.q_test_partitioned_queue" does not exist
LINE 2:         DELETE FROM pgmq.q_test_partitioned_queue
                            ^
QUERY:  
        DELETE FROM pgmq.q_test_partitioned_queue
        WHERE msg_id = $1
        RETURNING msg_id
        
CONTEXT:  PL/pgSQL function pgmq.delete(text,bigint) line 15 at EXECUTE
SELECT COUNT(*) = 2 FROM pgmq.q_test_partitioned_queue;
ERROR:  relation "pgmq.q_test_partitioned_queue" does not exist
LINE 1: SELECT COUNT(*) = 2 FROM pgmq.q_test_partitioned_queue;
                                 ^

-- Deleting batch
SELECT ARRAY(
    SELECT archive FROM pgmq.archive(
        'test_partitioned_queue',
        ARRAY[:msg_id1, :msg_id2, :msg_id3, -3]
    )
) = ARRAY[:msg_id1, :msg_id2]::bigint[];
ERROR:  relation "pgmq.q_test_partitioned_queue" does not exist
LINE 3:             DELETE FROM pgmq.q_test_partitioned_queue
                                ^
QUERY:  
        WITH archived AS (
            DELETE FROM pgmq.q_test_partitioned_queue
            WHERE msg_id = ANY($1)
            RETURNING msg_id, vt, read_ct, enqueued_at, message
        )
        INSERT INTO pgmq.a_test_partitioned_queue (msg_id, vt, read_ct, enqueued_at, message)
        SELECT msg_id, vt, read_ct, enqueued_at, message
        FROM archived
        RETURNING msg_id;
        
CONTEXT:  PL/pgSQL function pgmq.archive(text,bigint[]) line 21 at RETURN QUERY

-- test_transaction_create
BEGIN;
SELECT pgmq.create('transaction_test_queue');
 create 
--------
 
(1 row)

ROLLBACK;
SELECT tablename FROM pg_tables WHERE schemaname = 'pgmq' AND tablename = 'q_transaction_test_queue';
 tablename 
-----------
(0 rows)


-- test_detach_archive
SELECT pgmq.create('detach_archive_queue');
 create 
--------
 
(1 row)

DROP EXTENSION pgmq CASCADE;
SELECT tablename FROM pg_tables WHERE schemaname = 'pgmq' AND tablename = 'a_detach_archive_queue';
 tablename 
-----------
(0 rows)


-- With detach, archive remains
CREATE EXTENSION pgmq;
SELECT pgmq.create('detach_archive_queue');
 create 
--------
 
(1 row)

SELECT pgmq.detach_archive('detach_archive_queue');
 detach_archive 
----------------
 
(1 row)

DROP EXTENSION pgmq CASCADE;
SELECT tablename FROM pg_tables WHERE schemaname = 'pgmq' AND tablename = 'a_detach_archive_queue';
       tablename        
------------------------
 a_detach_archive_queue
(1 row)


--Truncated Index When queue name is max.
CREATE EXTENSION pgmq;
SELECT pgmq.create('long_queue_name_123456789012345678901234567890');
 create 
--------
 
(1 row)

SELECT pgmq.convert_archive_partitioned('long_queue_name_123456789012345678901234567890');
NOTICE:  identifier "archived_at_idx_long_queue_name_123456789012345678901234567890_old" will be truncated to "archived_at_idx_long_queue_name_123456789012345678901234567890_"
ERROR:  null values cannot be formatted as an SQL identifier
CONTEXT:  PL/pgSQL function pgmq.convert_archive_partitioned(text,text,text,integer) line 39 at EXECUTE

--Check for archive is already partitioned
SELECT pgmq.convert_archive_partitioned('long_queue_name_123456789012345678901234567890');
NOTICE:  identifier "archived_at_idx_long_queue_name_123456789012345678901234567890_old" will be truncated to "archived_at_idx_long_queue_name_123456789012345678901234567890_"
ERROR:  null values cannot be formatted as an SQL identifier
CONTEXT:  PL/pgSQL function pgmq.convert_archive_partitioned(text,text,text,integer) line 39 at EXECUTE

--Error out due to Index duplicate index at old table.
SELECT pgmq.create('long_queue_name_1234567890123456789012345678901');
 create 
--------
 
(1 row)

SELECT pgmq.convert_archive_partitioned('long_queue_name_1234567890123456789012345678901');
NOTICE:  identifier "archived_at_idx_long_queue_name_1234567890123456789012345678901_old" will be truncated to "archived_at_idx_long_queue_name_1234567890123456789012345678901"
ERROR:  relation "archived_at_idx_long_queue_name_1234567890123456789012345678901" already exists
CONTEXT:  SQL statement "ALTER INDEX pgmq.archived_at_idx_long_queue_name_1234567890123456789012345678901 RENAME TO archived_at_idx_long_queue_name_1234567890123456789012345678901_old"
PL/pgSQL function pgmq.convert_archive_partitioned(text,text,text,integer) line 34 at EXECUTE

--Success
SELECT pgmq.create('long_queue_name_');
 create 
--------
 
(1 row)

SELECT pgmq.convert_archive_partitioned('long_queue_name_');
ERROR:  null values cannot be formatted as an SQL identifier
CONTEXT:  PL/pgSQL function pgmq.convert_archive_partitioned(text,text,text,integer) line 39 at EXECUTE

\set SHOW_CONTEXT never

--Failed SQL injection attack
SELECT pgmq.create('abc');
 create 
--------
 
(1 row)

SELECT
   pgmq.delete(
     'abc where false;
     create table public.attack_vector(id int);
     delete from pgmq.q_abc',
     1
  );
ERROR:  queue name contains invalid characters: $, ;, --, or \'

--Special characters in queue name
SELECT pgmq.create('queue-hyphened');
 create 
--------
 
(1 row)

SELECT pgmq.send('queue-hyphened', '{"hello":"world"}');
 send 
------
    1
(1 row)

SELECT msg_id, read_ct, message FROM pgmq.read('queue-hyphened', 1, 1);
 msg_id | read_ct |      message       
--------+---------+--------------------
      1 |       1 | {"hello": "world"}
(1 row)

SELECT pgmq.archive('queue-hyphened', 1);
 archive 
---------
 t
(1 row)


SELECT pgmq.create('QueueCased');
 create 
--------
 
(1 row)

SELECT pgmq.send('QueueCased', '{"hello":"world"}');
 send 
------
    1
(1 row)

SELECT msg_id, read_ct, message FROM pgmq.read('QueueCased', 1, 1);
 msg_id | read_ct |      message       
--------+---------+--------------------
      1 |       1 | {"hello": "world"}
(1 row)

SELECT pgmq.archive('QueueCased', 1);
 archive 
---------
 t
(1 row)


SELECT pgmq.create_partitioned('queue-hyphened-part');
ERROR:  pg_partman is required for partitioned queues
SELECT pgmq.send('queue-hyphened-part', '{"hello":"world"}');
ERROR:  relation "pgmq.q_queue-hyphened-part" does not exist
LINE 2:         INSERT INTO pgmq."q_queue-hyphened-part" (vt, messag...
                            ^
QUERY:  
        INSERT INTO pgmq."q_queue-hyphened-part" (vt, message)
        VALUES ((clock_timestamp() + '@ 0'), $1)
        RETURNING msg_id;
        
SELECT msg_id, read_ct, message FROM pgmq.read('queue-hyphened-part', 1, 1);
ERROR:  relation "pgmq.q_queue-hyphened-part" does not exist
LINE 5:             FROM pgmq."q_queue-hyphened-part"
                         ^
QUERY:  
        WITH cte AS
        (
            SELECT msg_id
            FROM pgmq."q_queue-hyphened-part"
            WHERE vt <= clock_timestamp()
            ORDER BY msg_id ASC
            LIMIT $1
            FOR UPDATE SKIP LOCKED
        )
        UPDATE pgmq."q_queue-hyphened-part" m
        SET
            vt = clock_timestamp() + '@ 1 sec',
            read_ct = read_ct + 1
        FROM cte
        WHERE m.msg_id = cte.msg_id
        RETURNING m.msg_id, m.read_ct, m.enqueued_at, m.vt, m.message;
        
SELECT pgmq.archive('queue-hyphened-part', 1);
ERROR:  relation "pgmq.q_queue-hyphened-part" does not exist
LINE 3:             DELETE FROM pgmq."q_queue-hyphened-part"
                                ^
QUERY:  
        WITH archived AS (
            DELETE FROM pgmq."q_queue-hyphened-part"
            WHERE msg_id = $1
            RETURNING msg_id, vt, read_ct, enqueued_at, message
        )
        INSERT INTO pgmq."a_queue-hyphened-part" (msg_id, vt, read_ct, enqueued_at, message)
        SELECT msg_id, vt, read_ct, enqueued_at, message
        FROM archived
        RETURNING msg_id;
        

SELECT pgmq.create_partitioned('QueueCasedPart');
ERROR:  pg_partman is required for partitioned queues
SELECT pgmq.send('QueueCasedPart', '{"hello":"world"}');
ERROR:  relation "pgmq.q_queuecasedpart" does not exist
LINE 2:         INSERT INTO pgmq.q_queuecasedpart (vt, message)
                            ^
QUERY:  
        INSERT INTO pgmq.q_queuecasedpart (vt, message)
        VALUES ((clock_timestamp() + '@ 0'), $1)
        RETURNING msg_id;
        
SELECT msg_id, read_ct, message FROM pgmq.read('QueueCasedPart', 1, 1);
ERROR:  relation "pgmq.q_queuecasedpart" does not exist
LINE 5:             FROM pgmq.q_queuecasedpart
                         ^
QUERY:  
        WITH cte AS
        (
            SELECT msg_id
            FROM pgmq.q_queuecasedpart
            WHERE vt <= clock_timestamp()
            ORDER BY msg_id ASC
            LIMIT $1
            FOR UPDATE SKIP LOCKED
        )
        UPDATE pgmq.q_queuecasedpart m
        SET
            vt = clock_timestamp() + '@ 1 sec',
            read_ct = read_ct + 1
        FROM cte
        WHERE m.msg_id = cte.msg_id
        RETURNING m.msg_id, m.read_ct, m.enqueued_at, m.vt, m.message;
        
SELECT pgmq.archive('QueueCasedPart', 1);
ERROR:  relation "pgmq.q_queuecasedpart" does not exist
LINE 3:             DELETE FROM pgmq.q_queuecasedpart
                                ^
QUERY:  
        WITH archived AS (
            DELETE FROM pgmq.q_queuecasedpart
            WHERE msg_id = $1
            RETURNING msg_id, vt, read_ct, enqueued_at, message
        )
        INSERT INTO pgmq.a_queuecasedpart (msg_id, vt, read_ct, enqueued_at, message)
        SELECT msg_id, vt, read_ct, enqueued_at, message
        FROM archived
        RETURNING msg_id;
        

-- fails with invalid queue name
SELECT pgmq.create('dollar$-signed');
ERROR:  queue name contains invalid characters: $, ;, --, or \'
SELECT pgmq.create_partitioned('dollar$-signed-part');
ERROR:  queue name contains invalid characters: $, ;, --, or \'

-- input validation success
SELECT pgmq.format_table_name('cat', 'q');
 format_table_name 
-------------------
 q_cat
(1 row)

SELECT pgmq.format_table_name('cat-dog', 'a');
 format_table_name 
-------------------
 a_cat-dog
(1 row)

SELECT pgmq.format_table_name('cat_dog', 'q');
 format_table_name 
-------------------
 q_cat_dog
(1 row)


-- input validation failure
SELECT pgmq.format_table_name('dollar$fail', 'q');
ERROR:  queue name contains invalid characters: $, ;, --, or \'
SELECT pgmq.format_table_name('double--hyphen-fail', 'a');
ERROR:  queue name contains invalid characters: $, ;, --, or \'
SELECT pgmq.format_table_name('semicolon;fail', 'a');
ERROR:  queue name contains invalid characters: $, ;, --, or \'
SELECT pgmq.format_table_name($$single'quote-fail$$, 'a');
ERROR:  queue name contains invalid characters: $, ;, --, or \'

--Cleanup tests
DROP EXTENSION pgmq CASCADE;
DROP EXTENSION pg_partman CASCADE;
ERROR:  extension "pg_partman" does not exist
